{"version":3,"sources":["components/Carousel.tsx","components/Options/Options.tsx","App.tsx","index.tsx"],"names":["Buttons","Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","preparedImgs","setPreparedImgs","currentImg","setCurrentImg","isNextBtnDisabled","setIsNextBtnDisabled","isPrevBtnDisabled","setIsPrevBtnDisabled","isAnimationRun","setIsAnimationRun","prevImgIndex","carouselBlock","useRef","nextBtn","prevBtn","buttonClickHandlerInfinite","btn","prev","prevImgs","slice","current","scroll","setTimeout","framesCount","Math","floor","scrollPerFrame","currentDist","picturesBehind","interval","timerId","window","setInterval","next","scrollBy","clearInterval","buttonClickHandlerDefault","useEffect","className","ref","style","maxWidth","map","imageSrc","index","src","alt","toString","width","type","onClick","disabled","Options","changeStep","changeFrameSize","changeItemWidth","changeAnimationDuration","changeInfinite","value","onChange","e","target","max","min","checked","App","state","this","length","newStep","setState","newFrameSize","newItemWidth","newAnimationDuration","newInfinite","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfe6b9b2.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\nenum Buttons {\n  next = 'next',\n  prev = 'prev',\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [preparedImgs, setPreparedImgs] = useState(images);\n  const [currentImg, setCurrentImg] = useState(0);\n  const [isNextBtnDisabled, setIsNextBtnDisabled] = useState(false);\n  const [isPrevBtnDisabled, setIsPrevBtnDisabled] = useState(true);\n  const [isAnimationRun, setIsAnimationRun] = useState(false);\n\n  if (currentImg > 9) {\n    setCurrentImg(prevImgIndex => prevImgIndex - 9 - 1);\n  }\n\n  if (currentImg < 0) {\n    setCurrentImg(prevImgIndex => prevImgIndex + 9 + 1);\n  }\n\n  const carouselBlock = useRef<HTMLUListElement | null>(null);\n  const nextBtn = useRef<HTMLButtonElement | null>(null);\n  const prevBtn = useRef<HTMLButtonElement | null>(null);\n\n  useEffect(() => {\n    if (!infinite && currentImg === 0) {\n      setIsPrevBtnDisabled(true);\n    }\n\n    if (!infinite && currentImg === 9) {\n      setIsNextBtnDisabled(true);\n    }\n\n    if (infinite && !isAnimationRun) {\n      setIsNextBtnDisabled(false);\n      setIsPrevBtnDisabled(false);\n    }\n  }, [currentImg, infinite, isAnimationRun]);\n\n  function buttonClickHandlerInfinite(btn: Buttons) {\n    if (btn === Buttons.prev) {\n      setPreparedImgs(prevImgs => {\n        return [...prevImgs.slice(-1), ...prevImgs.slice(0, -1)];\n      });\n\n      carouselBlock.current?.scroll(itemWidth, 0);\n    }\n\n    if (nextBtn.current && prevBtn.current) {\n      setIsNextBtnDisabled(true);\n      setIsPrevBtnDisabled(true);\n    }\n\n    setTimeout(() => {\n      if (nextBtn.current && prevBtn.current) {\n        setIsNextBtnDisabled(false);\n        setIsPrevBtnDisabled(false);\n      }\n    }, animationDuration);\n\n    const framesCount = Math.floor(60 * (animationDuration / 1000));\n    const scrollPerFrame = Math.floor((step * itemWidth) / framesCount);\n    let currentDist = 0;\n    let picturesBehind = 0;\n    const interval = animationDuration / framesCount;\n\n    const timerId = window.setInterval(() => {\n      setIsAnimationRun(true);\n\n      if (btn === Buttons.next) {\n        carouselBlock.current?.scrollBy(scrollPerFrame, 0);\n      } else {\n        carouselBlock.current?.scrollBy(-scrollPerFrame, 0);\n      }\n\n      currentDist += scrollPerFrame;\n\n      if (currentDist >= itemWidth) {\n        currentDist = 0;\n        picturesBehind += 1;\n\n        if (btn === Buttons.next) {\n          setCurrentImg(prevImgIndex => {\n            if (!infinite && prevImgIndex === 8) {\n              window.clearInterval(timerId);\n              setIsAnimationRun(false);\n              setIsNextBtnDisabled(true);\n            }\n\n            return prevImgIndex + 1;\n          });\n\n          setPreparedImgs(prevImgs => {\n            return [...prevImgs.slice(1), ...prevImgs.slice(0, 1)];\n          });\n\n          carouselBlock.current?.scroll(0, 0);\n        } else {\n          setCurrentImg(prevImgIndex => prevImgIndex - 1);\n\n          setPreparedImgs(prevImgs => {\n            return [...prevImgs.slice(-1), ...prevImgs.slice(0, -1)];\n          });\n\n          carouselBlock.current?.scroll(itemWidth, 0);\n        }\n      }\n\n      if (picturesBehind === step) {\n        window.clearInterval(timerId);\n        setIsAnimationRun(false);\n\n        if (btn === Buttons.prev) {\n          setPreparedImgs(prevImgs => {\n            return [...prevImgs.slice(1), ...prevImgs.slice(0, 1)];\n          });\n\n          carouselBlock.current?.scroll(0, 0);\n        }\n      }\n    }, interval);\n  }\n\n  function buttonClickHandlerDefault(btn: Buttons) {\n    setPreparedImgs(images);\n    carouselBlock.current?.scroll(currentImg * itemWidth, 0);\n\n    if (nextBtn.current && prevBtn.current) {\n      setIsNextBtnDisabled(true);\n      setIsPrevBtnDisabled(true);\n    }\n\n    setTimeout(() => {\n      if (nextBtn.current && prevBtn.current) {\n        setIsNextBtnDisabled(false);\n        setIsPrevBtnDisabled(false);\n      }\n    }, animationDuration);\n\n    const framesCount = Math.floor(60 * (animationDuration / 1000));\n    const scrollPerFrame = Math.floor((step * itemWidth) / framesCount);\n    let currentDist = 0;\n    let picturesBehind = 0;\n    const interval = animationDuration / framesCount;\n\n    const timerId = window.setInterval(() => {\n      setIsAnimationRun(true);\n\n      if (btn === Buttons.next) {\n        carouselBlock.current?.scrollBy(scrollPerFrame, 0);\n      } else {\n        carouselBlock.current?.scrollBy(-scrollPerFrame, 0);\n      }\n\n      currentDist += scrollPerFrame;\n\n      if (currentDist >= itemWidth) {\n        currentDist = 0;\n        picturesBehind += 1;\n\n        if (btn === Buttons.next) {\n          setCurrentImg(prevImgIndex => {\n            if (prevImgIndex + step + 1 >= 9) {\n              window.clearInterval(timerId);\n              setIsAnimationRun(false);\n              setIsNextBtnDisabled(true);\n\n              return prevImgIndex;\n            }\n\n            carouselBlock.current?.scroll((prevImgIndex + 1) * itemWidth, 0);\n\n            return prevImgIndex + 1;\n          });\n        } else {\n          setCurrentImg(prevImgIndex => {\n            if (prevImgIndex - 1 < 0) {\n              window.clearInterval(timerId);\n              setIsAnimationRun(false);\n              setIsPrevBtnDisabled(true);\n\n              return prevImgIndex;\n            }\n\n            carouselBlock.current?.scroll((prevImgIndex - 1) * itemWidth, 0);\n\n            return prevImgIndex - 1;\n          });\n        }\n      }\n\n      if (picturesBehind === step) {\n        window.clearInterval(timerId);\n        setIsAnimationRun(false);\n      }\n    }, interval);\n  }\n\n  return (\n    <div className=\"Carousel\">\n      <ul\n        className=\"Carousel__list\"\n        ref={carouselBlock}\n        style={{ maxWidth: `${frameSize * itemWidth}px` }}\n      >\n\n        {preparedImgs.map((imageSrc, index) => (\n          <li key={imageSrc}>\n            <img\n              src={imageSrc}\n              alt={index.toString()}\n              style={{ width: itemWidth }}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => (infinite\n            ? buttonClickHandlerInfinite(Buttons.prev)\n            : buttonClickHandlerDefault(Buttons.prev))}\n          disabled={isPrevBtnDisabled}\n          ref={prevBtn}\n        >\n          <i className=\"fas fa-angle-double-left\" />\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => (infinite\n            ? buttonClickHandlerInfinite(Buttons.next)\n            : buttonClickHandlerDefault(Buttons.next))}\n          ref={nextBtn}\n          disabled={isNextBtnDisabled}\n          data-cy=\"next\"\n        >\n          <i className=\"fas fa-angle-double-right\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import './Options.scss';\n\ntype Props = {\n  step: number\n  frameSize: number\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n  changeStep: (val: number) => void;\n  changeFrameSize: (val: number) => void;\n  changeItemWidth: (val: number) => void;\n  changeAnimationDuration: (val: number) => void;\n  changeInfinite: (val: boolean) => void;\n};\n\nexport const Options: React.FC<Props> = ({\n  step,\n  itemWidth,\n  frameSize,\n  animationDuration,\n  infinite,\n  changeStep,\n  changeFrameSize,\n  changeItemWidth,\n  changeAnimationDuration,\n  changeInfinite,\n}) => {\n  return (\n    <div className=\"Options\">\n      <label className=\"Options__row\">\n        Item Width:\n        <input\n          type=\"number\"\n          className=\"Options__input\"\n          step={10}\n          value={itemWidth}\n          onChange={e => changeItemWidth(+e.target.value)}\n        />\n      </label>\n\n      <label className=\"Options__row\">\n        Step:\n        <input\n          type=\"number\"\n          className=\"Options__input\"\n          value={step}\n          onChange={e => changeStep(+e.target.value)}\n        />\n      </label>\n\n      <label className=\"Options__row\">\n        Frame Size:\n        <input\n          type=\"number\"\n          className=\"Options__input\"\n          value={frameSize}\n          max=\"8\"\n          min=\"1\"\n          onChange={e => changeFrameSize(+e.target.value)}\n        />\n      </label>\n\n      <label className=\"Options__row\">\n        Animation Duration:\n        <input\n          type=\"number\"\n          className=\"Options__input\"\n          step={100}\n          value={animationDuration}\n          onChange={e => changeAnimationDuration(+e.target.value)}\n        />\n      </label>\n\n      <label className=\"Options__row\">\n        Infinite:\n        <input\n          type=\"checkbox\"\n          className=\"Options__input\"\n          checked={infinite}\n          onChange={e => changeInfinite(e.target.checked)}\n        />\n      </label>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\nimport { Options } from './components/Options/Options';\n\ninterface State {\n  images: string[];\n  step: number\n  frameSize: number\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <Options\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n          changeStep={(newStep) => {\n            return this.setState({ step: newStep });\n          }}\n          changeFrameSize={(newFrameSize) => {\n            return this.setState({ frameSize: newFrameSize });\n          }}\n          changeItemWidth={(newItemWidth) => {\n            return this.setState({ itemWidth: newItemWidth });\n          }}\n          changeAnimationDuration={(newAnimationDuration) => {\n            return this.setState({ animationDuration: newAnimationDuration });\n          }}\n          changeInfinite={(newInfinite) => {\n            return this.setState({ infinite: newInfinite });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}